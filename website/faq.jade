h1 #{ title }

h3 What does "Mithras" mean?

p In ancient times, people worshipped Mithras.  See the Wikipedia <a href="https://en.wikipedia.org/wiki/Mithraism">article</a>.

h3 This looks a lot like AWS Cloudformation.  How is it different?

p.
  Cloudformation uses JSON to describe AWS resources.  Mithras
  uses <i>Javascript</i>.  That's a pretty huge difference.  With
  Mithras, you can have actual <i>logic</i> in your resource
  definitions.  It makes your configurations waaaay more flexible,
  easier to understand, and easier to maintain.

p.
  See <a href="guide4.html">Part Four</a> of the <a
  href="guide1.html">Guide</a> for an example of how to use Mithras in
  a way that JSON (let alone YAML) can't match.

h3 How can I help?

p.
  See the <a href="community.html">Community</a> page.

h3 How is Mithras licensed?

p.
  GPL V.3.  See <a href="https://github.com/cvillecsteele/mithras/blob/master/LICENSE.txt">LICENSE.txt</a>.

h3 What about Autoscaling Groups?

p.
  Good question.  Mithras is a push-based system, with no agent on
  your instances.  So how the heck do you set up an instance when it's
  been created by an AWS Autoscaling Group (ASG)?  The problem here is
  that without an agent running on the newly-created instance, it
  can't "phone home" to Mithras to get configured.  Somehow Mithras
  needs to discover it is there, and then go configure it.

p.
  The Mithras solution involves using ASG lifecycle hooks.  First you
  need an SQS queue and an IAM role that your ASG can assume, with the
  right privileges to post to the queue.  Then, when you create the
  ASG, create a lifecycle hook for it, so that it sends notifications
  of instance launch to the queue.  Then, in a Mithas daemon, you poll
  the queue, and look for the notifications.  When you get one, pull
  the <code>Body</code> attribute out of the message object, use
  <code>JSON.parse()</code> to read the JSON, and in it you find:

pre.
  {
    "AccountId": "286536233385",
    "AutoScalingGroupName": "name",
    "EC2InstanceId": "i-3fd0c6a4",
    "LifecycleActionToken": "982c71f5-04e4-493f-8d40-637493e5dabb",
    "LifecycleHookName": "hookName",
    "LifecycleTransition": "autoscaling:EC2_INSTANCE_LAUNCHING",
    "RequestId": "abe5dd0b-54af-4d4d-acdb-8a0624de0ca4",
    "Service": "AWS Auto Scaling",
    "Time": "2016-04-27T20:46:15.094Z"
  }

p.
  There you go.  Now you can use the instance id to go off and
  configure it, using <code>aws.instances.describe()</code>.  You can
  find an example of all of this in the <code><a href="https://github.com/cvillecsteele/mithras/blob/master/example/asg.js">example/asg.js</a></code>
  and <code><a href="https://github.com/cvillecsteele/mithras/blob/master/example/asg_daemon.js">example/asg_daemon.js</a></code> files.

h3 How does Mithras handle runtime values for resources?

p.
  See <a href="design.html">Concepts and Design</a>.

h3 How is the _target property set on resources?

p.
  See <a href="design.html">Concepts and Design</a>.

